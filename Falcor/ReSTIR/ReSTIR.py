from falcor import *

def render_graph_ReSTIRTest():
    g = RenderGraph('ReSTIRTest')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ShadeRISPass.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SpatialReuseRISPass.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('VisibilityRISPass.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TemporalReuseRISPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    VisibilityRISPass = createPass('VisibilityRISPass')
    g.addPass(VisibilityRISPass, 'VisibilityRISPass')
    TemporalReuseRISPass = createPass('TemporalReuseRISPass')
    g.addPass(TemporalReuseRISPass, 'TemporalReuseRISPass')
    ShadeRISPass = createPass('ShadeRISPass')
    g.addPass(ShadeRISPass, 'ShadeRISPass')
    GBufferRISRT = createPass('GBufferRISRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useDOF': True})
    g.addPass(GBufferRISRT, 'GBufferRISRT')
    SpatialReuseRISPass = createPass('SpatialReuseRISPass')
    g.addPass(SpatialReuseRISPass, 'SpatialReuseRISPass')
    SpatialReuseRISPass0 = createPass('SpatialReuseRISPass')
    g.addPass(SpatialReuseRISPass0, 'SpatialReuseRISPass0')
    AccumulatePass = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    BlitPass = createPass('BlitPass', {'filter': SamplerFilter.Linear})
    g.addPass(BlitPass, 'BlitPass')
    g.addEdge('GBufferRISRT.posW', 'TemporalReuseRISPass.posW')
    g.addEdge('GBufferRISRT.normW', 'TemporalReuseRISPass.normW')
    g.addEdge('GBufferRISRT.posW', 'VisibilityRISPass.posW')
    g.addEdge('GBufferRISRT.posW', 'ShadeRISPass.posW')
    g.addEdge('GBufferRISRT.normW', 'ShadeRISPass.normW')
    g.addEdge('GBufferRISRT.mvec', 'TemporalReuseRISPass.mvec')
    g.addEdge('GBufferRISRT.posW', 'SpatialReuseRISPass.posW')
    g.addEdge('GBufferRISRT.normW', 'SpatialReuseRISPass.normW')
    g.addEdge('SpatialReuseRISPass0.emittedLightOut', 'ShadeRISPass.emittedLight')
    g.addEdge('SpatialReuseRISPass0.dirToSampleOut', 'ShadeRISPass.dirToSample')
    g.addEdge('SpatialReuseRISPass0.reservoirOut', 'ShadeRISPass.reservoir')
    g.addEdge('GBufferRISRT.posW', 'SpatialReuseRISPass0.posW')
    g.addEdge('GBufferRISRT.normW', 'SpatialReuseRISPass0.normW')
    g.addEdge('SpatialReuseRISPass.emittedLightOut', 'SpatialReuseRISPass0.emittedLight')
    g.addEdge('SpatialReuseRISPass.dirToSampleOut', 'SpatialReuseRISPass0.dirToSample')
    g.addEdge('SpatialReuseRISPass.reservoirOut', 'SpatialReuseRISPass0.reservoir')
    g.addEdge('GBufferRISRT.emittedLight', 'TemporalReuseRISPass.emittedLight')
    g.addEdge('ShadeRISPass.colorOut', 'AccumulatePass.input')
    g.addEdge('AccumulatePass.output', 'BlitPass.src')
    g.addEdge('GBufferRISRT.diff', 'TemporalReuseRISPass.diff')
    g.addEdge('GBufferRISRT.diff', 'SpatialReuseRISPass.diff')
    g.addEdge('GBufferRISRT.diff', 'SpatialReuseRISPass0.diff')
    g.addEdge('GBufferRISRT.diff', 'ShadeRISPass.diff')
    g.addEdge('VisibilityRISPass.reservoir', 'TemporalReuseRISPass.reservoir')
    g.addEdge('GBufferRISRT.dirToSample', 'VisibilityRISPass.dirToSample')
    g.addEdge('GBufferRISRT.reservoir', 'VisibilityRISPass.reservoir')
    g.addEdge('GBufferRISRT.dirToSample', 'TemporalReuseRISPass.dirToSample')
    g.addEdge('TemporalReuseRISPass.emittedLight', 'SpatialReuseRISPass.emittedLight')
    g.addEdge('TemporalReuseRISPass.dirToSample', 'SpatialReuseRISPass.dirToSample')
    g.addEdge('TemporalReuseRISPass.reservoir', 'SpatialReuseRISPass.reservoir')
    g.markOutput('ShadeRISPass.colorOut')
    g.markOutput('BlitPass.dst')
    return g

ReSTIRTest = render_graph_ReSTIRTest()
try: m.addGraph(ReSTIRTest)
except NameError: None
